name: Validate

on:
  push:
    branches:
      - '**'
  # pull_request:
  #   branches:
  #     - '**'

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        working-directory: ./frontend
        run: npm install @eslint/js
      - name: Build
        working-directory: ./frontend
        run: npm run build

  frontend-lint:
    runs-on: ubuntu-latest
    needs: frontend-build
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install modules
        run: npm i -g eslint eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y eslint-plugin-import eslint-plugin-prettier eslint-config-prettier
        working-directory: ./frontend
      - name: Install dependencies
        working-directory: ./frontend
        run: npm install @eslint/js
      - name: Run ESLint
        run: eslint .
        working-directory: ./frontend

  frontend-test:
    runs-on: ubuntu-latest
    needs: frontend-build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        working-directory: ./frontend
        run: npm install
      - name: Install required packages
        working-directory: ./frontend
        run: npm install concurrently http-server wait-on
      - name: Install axe-playwright
        working-directory: ./frontend
        run: npm install --save-dev axe-playwright
      - name: Cache Playwright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install Playwright
        working-directory: ./frontend
        run: npx playwright install --with-deps
      - name: Build Storybook
        working-directory: ./frontend
        run: npm run build-storybook --quiet
      - name: Serve Storybook and run tests
        working-directory: ./frontend
        run: |
          npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "npx http-server storybook-static --port 6006 --silent" \
            "npx wait-on tcp:6006 && npm run test-storybook"

  backend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Build with Maven
        working-directory: ./backend
        run: mvn clean compile
      - name: Package with Maven
        working-directory: ./backend
        run: mvn package -DskipTests

  backend-test:
    runs-on: ubuntu-latest
    needs: backend-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Run Unit tests
        working-directory: ./backend
        run: mvn test
  
  # integration-tests:
  #   runs-on: ubuntu-latest
  #   needs: [backend-test, frontend-test]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Set up JDK
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: '21'
  #         distribution: 'temurin'
  #     - name: Run Integration tests
  #       working-directory: ./backend
  #       run: mvn verify -DskipTests=false -DfailIfNoTests=false